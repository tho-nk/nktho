<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tcp on OH! THO</title><link>https://www.nktho.fr/tags/tcp/</link><description>Recent content in Tcp on OH! THO</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 24 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.nktho.fr/tags/tcp/index.xml" rel="self" type="application/rss+xml"/><item><title>Trading Exchange</title><link>https://www.nktho.fr/p/trading_exchange/</link><pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate><guid>https://www.nktho.fr/p/trading_exchange/</guid><description>&lt;img src="https://www.nktho.fr/p/trading_exchange/trading_exchange.webp" alt="Featured image of post Trading Exchange" />&lt;p>Table of Contents&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#architect" >Architect&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#server" >Server&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#matching-engine" >Matching Engine&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#fifo-queue" >FIFO Queue&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="#improvements" >Improvements&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="architect">Architect&lt;/h3>
&lt;p>The trading exchange has two main components:&lt;/p>
&lt;h4 id="server">Server&lt;/h4>
&lt;p>This is a server using the UDP protocol, which acts as a listener for client requests and dispatches these requests to a matching engine. The implementation is based on Boost.Asio.&lt;/p>
&lt;h4 id="matching-engine">Matching Engine&lt;/h4>
&lt;p>This component performs the logic of matching order when receiving new client request.&lt;/p>
&lt;p>It supports multi orderbook by symbol.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Each orderbook maintains order with &lt;code>AtPriceOrderMap&lt;/code>. Order with same price will be add to the same &lt;code>AtPriceOrder&lt;/code> using time priority. Using hashtable (std::array) support constant lookup. Each &lt;code>AtPriceOrder&lt;/code> is linked to the prev and next PriceLevel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Each orderbook maintains &lt;code>Top of Book&lt;/code> (&lt;code>TOB&lt;/code>) per side.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In buy side, the top of the book is the &lt;code>AtPriceOrder&lt;/code> with highest buy price. Next &lt;code>AtPriceOrder&lt;/code> of the &lt;code>TOB&lt;/code> is the next highest smaller &lt;code>AtPriceOrder&lt;/code> in the &lt;code>AtPriceOrderMap&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In sell side, the top of the book is the &lt;code>AtPriceOrder&lt;/code> with lowest sell price. Next &lt;code>AtPriceOrder&lt;/code> of the &lt;code>TOB&lt;/code> is the next smallest higher &lt;code>AtPriceOrder&lt;/code> in the &lt;code>AtPriceOrderMap&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Orders are managed with &lt;code>OrderManager&lt;/code>, this component is in charged of creating new order and releasing expired order.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="fifo-queue">FIFO Queue&lt;/h4>
&lt;p>A thread-safe MPMC (multi-producers, multi-consumers) queue used to communicate between the server and the matching engine&lt;/p>
&lt;ul>
&lt;li>Stdout is used to streamed the output of the matching engine. The stdout is used in threadsafe&lt;/li>
&lt;li>Stdlog is used to streamed the performance measurement message
&lt;ul>
&lt;li>&lt;code>Perf|OrderBook|Add|Execution|111&lt;/code>&lt;/li>
&lt;li>&lt;code>Perf|OrderBook|Cancel|Execution|50&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="improvements">Improvements&lt;/h3>
&lt;ul>
&lt;li>Add an interface for the Server to support listening on different protocols, such as TCP/IP.&lt;/li>
&lt;li>Implement the FIX protocol.&lt;/li>
&lt;li>Implement a lock-free queue.&lt;/li>
&lt;li>Optimize performance.&lt;/li>
&lt;li>Implement an object pool to avoid dynamic allocations.&lt;/li>
&lt;/ul></description></item></channel></rss>